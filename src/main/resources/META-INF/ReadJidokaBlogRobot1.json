{"id":"ReadJidokaBlogRobot1","robotType":"ROBOT","mainClass":"com.novayre.jidoka.robot.tutorial.ReadJidokaBlogRobot1","actions":["init","createExcel","openBrowser","navigate","extractPost","end"],"conditionalActions":["hasMoreItems"],"fieldLinks":[],"actionDetails":[{"id":"init","implementation":"/**\n\t * Initial action 'Init'.\n\t * \n\t * @throws Exception\n\t */\npublic void init() throws Exception {\n    // Initialization of the robot components\n    server = (IJidokaServer<?>) JidokaFactory.getServer();\n    windows = IJidokaRobot.getInstance(this);\n    // Default pause after typing or using the mouse\n    windows.typingPause(PAUSE);\n    windows.mousePause(PAUSE);\n}"},{"id":"createExcel","implementation":"/**\n\t * Action 'Create Excel'.\n\t * \n\t * @throws Exception\n\t */\npublic void createExcel() throws Exception {\n    /*\n\t\t * Get an instance of IExcel, one of the interfaces included in the\n\t\t * Data-Provider module.\n\t\t */\n    excel = IExcel.getExcelInstance(this);\n    // Build the complete path of the file.\n    String excel_file = Paths.get(server.getCurrentDir(), \"salida.xlsx\").toString();\n    // Create the Excel file from the scratch.\n    excel.create(excel_file, EExcelType.XLSX);\n    /*\n\t\t * Add the excel to the list of files to upload to the server when the\n\t\t * robot execution ends.\n\t\t */\n    files.add(excel_file);\n    // Set the value for the first cell.\n    excel.setCellValueByRef(new  CellReference(0, 0), \"TÃ­tulo del post\");\n}"},{"id":"openBrowser","implementation":"/**\n\t * Action 'Open Browser'.\n\t * \n\t * @throws Exception\n\t */\npublic void openBrowser() throws Exception {\n    // Get the Browser module instance.\n    browser = IWebBrowserSupport.getInstance(this, windows);\n    // Set the browser to use\n    setBrowser();\n    // Initialize the browser.\n    browser.initBrowser();\n    server.info(\"inicio el browser\");\n}"},{"id":"navigate","implementation":"/**\n\t * Action 'Navigate to Jidoka Blog'.\n\t * \n\t * @throws Exception\n\t */\npublic void navigate() throws Exception {\n    // Navigate to the home page of the blog.\n    browser.navigate(HOME_URL);\n    // Wait for the Jidoka Blog page to be loaded \n    checkJidokaBlogLoaded();\n    // XPath expression to the button that loads more posts.\n    By loadMoreButton = By.cssSelector(\".pager_load_more .button_icon .button_label\");\n    // Count all pages posts.\n    while (true) {\n        // Post links in the current page.\n        List<WebElement> currentPagePostLinks = browser.getElements(By.cssSelector(\".post-more\"));\n        // Number of posts in the current page.\n        numberOfItems += currentPagePostLinks.size();\n        // Save all post links.\n        currentPagePostLinks.forEach(( link)->postLinks.add(link.getAttribute(\"href\")));\n        // Check if there are more posts to load.\n        boolean morePosts = windows.waitFor(this).wait(3, \"Waiting for more posts to be loaded\", false, false, ()->browser.existsElement(loadMoreButton));\n        if (!morePosts) {\n            // When no more posts, end loop.\n            break;\n        }\n        // Get button to click later to get more posts\n        WebElement element = browser.getElement(loadMoreButton);\n        browser.moveTo(element);\n        windows.clickOnCenter();\n        windows.getKeyboard().up(4).pause();\n        // Load the next page.\n        browser.clickOnElement(loadMoreButton);\n        // Pause to allow the browser for updating the DOM.\n        windows.pause(5000);\n    }\n    // Go back to the home page.\n    browser.navigate(HOME_URL);\n    /*\n\t\t * At this point, all items have been retrieved, so the number of items\n\t\t * can be set.\n\t\t */\n    server.setNumberOfItems(numberOfItems);\n}"},{"id":"extractPost","implementation":"/**\n\t * Action 'Extract post'.\n\t */\npublic void extractPost() throws Exception {\n    // Get the title.\n    String title = browser.getText(By.cssSelector(\"h1.entry-title\"));\n    // Notify the server the start of the item process.\n    server.setCurrentItem(currentItemIndex, title);\n    // Write the title in the Excel, at first column (index 0).\n    excel.setCellValueByRef(new  CellReference(currentItemIndex, 0), title);\n    // Get the image for the current element.\n    WebElement image_element = browser.getElement(By.cssSelector(\"img.wp-post-image\"));\n    // Get the image 'src' attribute escaping special characters\n    String image = URI.create(image_element.getAttribute(HTML.Attribute.SRC.toString())).toASCIIString();\n    /*\n\t\t * Create a temporary file using the same extension as the specified by\n\t\t * the image URL.\n\t\t */\n    File file = File.createTempFile(\"jidoka\", String.format(\"post%s\", image.substring(image.lastIndexOf('.'))));\n    // Make a copy from the URL to the temporary file.\n    try (InputStream is = new  URL(image).openStream();\n        OutputStream os = new  FileOutputStream(file)) {\n        IOUtils.copy(is, os);\n    } catch (IOException e) {\n        server.error(String.format(\"Error getting image %s\", image), e);\n        server.setCurrentItemResultToWarn(e.getLocalizedMessage());\n        return;\n    }\n    /*\n\t\t * Add the local file containing the image to the list of files to send\n\t\t * to the server when the robot execution ends.\n\t\t */\n    files.add(file.getAbsolutePath());\n    // Notify the server the result is OK.\n    server.setCurrentItemResultToOK();\n}"},{"id":"end","implementation":"/**\n\t * Action 'End'.\n\t * \n\t * @throws Exception\n\t */\npublic void end() throws Exception {\n}"}],"conditionalActionDetails":[{"id":"hasMoreItems","implementation":"/**\n\t * Action 'More?'.\n\t * \n\t * @return the wire name\n\t * @throws Exception\n\t */\npublic String hasMoreItems() throws Exception {\n    // Increase index\n    currentItemIndex++;\n    /*\n\t\t * If the index is greater than the total number of elements, the\n\t\t * process is finished. Otherwise, continue with the next element.\n\t\t */\n    if (currentItemIndex > numberOfItems) {\n        return \"no\";\n    }\n    // Load the next post.\n    browser.navigate(postLinks.get(currentItemIndex - 1));\n    return \"yes\";\n}"}]}